/*
 * Copyright (c) 2016, Salesforce.com, Inc.
 * All rights reserved.
 */

////////// Types and Variables //////////

type MaybeIndex : 0..9;
type StrictIndex : 1..9;
type NextIndex : 1..10;

type LedgerId : 1..3;
type ClientId : 1..3;
type BookieId : 1..5;

type EnsembleIdx : 1..3;
type Ensemble : Set<BookieId>[EnsembleIdx];

type LedgerMeta : record {
  state : either {
    Open,
    Closed {
      lac: MaybeIndex,
    },
  },
  ensemble: Ensemble,
};

type ZooKeeper : record {
  ledgers : Vector<LedgerMeta>[LedgerId],
  nextBookie : BookieId,
};

var zooKeeper : ZooKeeper;

type Entry : record {
  // value omitted
};

type Ledger : record {
  id: LedgerId,
  entries: Vector<Entry>[StrictIndex],
  lac: MaybeIndex,
  fenced: Boolean,
}

type Bookie : record {
  offline : Boolean,
  ledgers : Vector<Ledger>[1..2],
};

var bookies: Array<Bookie>[BookieId];

type WriterBookie : record {
  bookieId : BookieId,
  lastEntry : MaybeIndex,
  retryAt : Time,
};

type RecoverBookie : record {
  bookieId : BookieId,
  lastEntry : MaybeIndex,
  fenced : Boolean,
  retryAt : Time,
};

type Client : either {
  Inactive,
  CreatingLedger,
  Writer {
    ledgerId : LedgerId,
    ensemble : Vector<WriterBookie>[EnsembleIdx],
    numEntries : MaybeIndex,
  },
  Recovering {
    ledgerId : LedgerId,
    ensemble : Vector<RecoverBookie>[EnsembleIdx],
  },
};

var clients : Array<Client>[ClientId];

type NodeId : either {
  ClientNode {
    id: ClientId,
  },
  BookieNode {
    id: BookieId,
  },
  ZooKeeperNode,
};

type AddEntryResponseStatus : either {
  AddEntryOk,
  AddEntryFenced,
}

type Message : record {
  from: NodeId,
  to: NodeId,
  sentAt: Time,
  deliverAt: Time,
  payload: either {
    // Client <-> ZooKeeper
    CreateLedgerRequest,
    CreateLedgerResponse {
      ledgerId : LedgerId,
      ensemble : Ensemble,
    },
    CloseLedgerRequest {
      ledgerId : LedgerId,
      lac : MaybeIndex,
    },
    ReadLedgerMetaRequest {
      ledgerId : LedgerId,
    },
    ReadLedgerMetaResponse {
      ledgerId : LedgerId,
      meta : LedgerMeta,
    },

    // Client <-> Bookie
    AddEntryRequest {
      ledgerId : LedgerId,
      entryId : StrictIndex,
      lac : MaybeIndex,
      recovery : Boolean,
    },
    AddEntryResponse {
      status : AddEntryResponseStatus,
    },
    FenceLedgerRequest {
      ledgerId : LedgerId,
    },
    FenceLedgerResponse {
      ledgerId : LedgerId,
      lastEntry : MaybeIndex,
    },
  },
};

var network : MultiSet<Message>[0..20];

////////// Functions //////////

// Adds a message to the network with a randomized delivery time.
function sendMessage(message: Message) {
  message.sentAt = later(0);
  message.deliverAt = later(urandomRange(10000, 20000));
  push(network, message);
}

// Computes a writer client's last-add-confirmed: the largest numbered entry
// stored by a majority of its ensemble.
function calculateLAC(ensemble : Vector<WriterBookie>[EnsembleIdx]) -> MaybeIndex {
  var lac : MaybeIndex = 0;
  for bookie in ensemble {
    var count : 0..5;
    for bookie2 in ensemble {
      if bookie2.lastEntry >= bookie.lastEntry {
        count += 1;
      }
    }
    if count * 2 > size(ensemble) && bookie.lastEntry > lac {
      lac = bookie.lastEntry;
    }
  }
  return lac;
}

// Returns bookie IDs in round-robin order.
function bookieGen() -> BookieId {
  var next : BookieId = zooKeeper.nextBookie;
  if next == size(bookies) {
    zooKeeper.nextBookie = 1;
  } else {
    zooKeeper.nextBookie += 1;
  }
  return next;
}

////////// Rules //////////

// A client reboots.
external rebootClient
for client in clients {
  client = Inactive;
}

// A client requests ZooKeeper to create a new ledger.
external sendCreateLedger for clientId, client in clients {
  match client {
    Inactive {
      client = CreatingLedger;
      sendMessage(Message {
        from: ClientNode { id: clientId },
        to: ZooKeeperNode,
        payload: CreateLedgerRequest,
      });
    }
    default {
      // do nothing
    }
  }
}

// A client creates a new entry locally, to be replicated later.
external createEntry
for client in clients {
  match client {
    Writer(writer) {
      writer.numEntries += 1;
      client = writer;
    }
    default {
      // do nothing
    }
  }
}

// A client replicates an entry to a single bookie.
rule sendEntry
for clientId, client in clients
for bookieId, _ in bookies {
  match client {
    Writer(writer) {
      for bookie in writer.ensemble {
        if bookie.bookieId == bookieId {
          if bookie.lastEntry < writer.numEntries && past(bookie.retryAt) {
            sendMessage(Message {
              from: ClientNode { id: clientId },
              to: BookieNode { id: bookieId },
              payload: AddEntryRequest {
                ledgerId: writer.ledgerId,
                entryId: bookie.lastEntry + 1,
                lac: calculateLAC(writer.ensemble),
                recovery: False,
              },
            });
            bookie.retryAt = later(50000);
            client = writer;
          }
          break;
        }
      }
    }
    default {
      /* do nothing */
    }
  }
}

// A writer stops writing and closes its own ledger in ZooKeeper.
external sendCloseLedger
for clientId, client in clients {
  match client {
    Writer(writer) {
      sendMessage(Message {
        from: ClientNode { id: clientId },
        to: ZooKeeperNode,
        payload: CloseLedgerRequest {
          ledgerId: writer.ledgerId,
          lac: calculateLAC(writer.ensemble),
        },
      });
      client = Inactive;
    }
    default {
      // do nothing
    }
  }
}

// A client wants to recover a particular ledger.
external sendRecover
for clientId, client in clients
for ledgerId, _ in zooKeeper.ledgers {
  match client {
    Inactive {
      match zooKeeper.ledgers[ledgerId].state {
        Open {
          client = Recovering {
            ledgerId: ledgerId,
          };
          sendMessage(Message {
            from: ClientNode { id: clientId },
            to: ZooKeeperNode,
            payload: ReadLedgerMetaRequest {
              ledgerId: ledgerId,
            },
          });
        }
        default {
          /* do nothing */
        }
      } // zk ledger state
    }
    default {
      // do nothing
    }
  } // client state
}

// As part of recovery, a client fences off a ledger on a single bookie.
rule sendFence
for clientId, client in clients
for bookieId, _ in bookies {
  match client {
    Recovering(recovering) {
      for bookie in recovering.ensemble {
        if bookieId == bookie.bookieId {
          if !bookie.fenced && past(bookie.retryAt) {
            sendMessage(Message {
              from: ClientNode { id: clientId },
              to: BookieNode { id: bookieId },
              payload: FenceLedgerRequest {
                ledgerId: recovering.ledgerId,
              },
            });
            bookie.retryAt = later(50000);
            client = recovering;
          }
          break;
        }
      }
    }
    default {
      // do nothing
    }
  } // client state
}

// A client reports to ZooKeeper that recovery is done, closing the ledger.
rule completeRecovery
for clientId, client in clients {
  match client {
    Recovering(recovering) {
      var count : 0..5;
      var max : MaybeIndex;
      for bookie in recovering.ensemble {
        if bookie.fenced {
          count += 1;
          if bookie.lastEntry > max {
            max = bookie.lastEntry;
          }
        }
      }
      if count * 2 > size(recovering.ensemble) {
        sendMessage(Message {
          from: ClientNode { id: clientId },
          to: ZooKeeperNode,
          payload: CloseLedgerRequest {
            ledgerId: recovering.ledgerId,
            lac: max,
          },
        });
        client = Inactive;
      }
    }
    default {
      // do nothing
    }
  } // client state
}

// A node receives and processes a network message.
rule handleMessage for message in network {
  if past(message.deliverAt) {
    match message.to {

      ClientNode(to) {
        match message.payload {

          CreateLedgerResponse(payload) {
            var ensemble : Vector<WriterBookie>[1..5];
            for bookieId in payload.ensemble {
              push(ensemble, WriterBookie {
                bookieId: bookieId,
              });
            }
            clients[to.id] = Writer {
              ledgerId: payload.ledgerId,
              ensemble: ensemble,
            };
          } // CreateLedgerResponse

          AddEntryResponse(payload) {
            match clients[to.id] {
              Writer(writer) {
                match payload.status {
                  AddEntryOk {
                    for bookie in writer.ensemble {
                      if BookieNode { id: bookie.bookieId } == message.from {
                        bookie.lastEntry += 1;
                        bookie.retryAt = 0;
                        clients[to.id] = writer;
                        break;
                      }
                    }
                  }
                  AddEntryFenced {
                    clients[to.id] = Inactive;
                  }
                }
              }
              default { /* do nothing */ }
            }
          } // AddEntryResponse

          ReadLedgerMetaResponse(payload) {
            match clients[to.id] {
              Recovering(recovering) {
                if empty(recovering.ensemble) {
                  match payload.meta.state {
                    Open {
                      for bookieId in payload.meta.ensemble {
                        push(recovering.ensemble, RecoverBookie {
                          bookieId: bookieId,
                        });
                      }
                      clients[to.id] = recovering;
                    }
                    Closed {
                      clients[to.id] = Inactive;
                    }
                  }
                }
              }
              default { /* do nothing */ }
            }
          } // ReadLedgerMetaResponse

          FenceLedgerResponse(payload) {
            match clients[to.id] {
              Recovering(recovering) {
                if recovering.ledgerId == payload.ledgerId {
                  for bookie in recovering.ensemble {
                    if BookieNode { id: bookie.bookieId } == message.from {
                      bookie.lastEntry = payload.lastEntry;
                      bookie.fenced = True;
                      clients[to.id] = recovering;
                      break;
                    }
                  }
                }
              }
              default { /* do nothing */ }
            }
          } // FenceLedgerResponse

          default { assert False; } // other message types
        }
      } // to ClientNode

      BookieNode(to) {
        match message.payload {

          AddEntryRequest(payload) {
            var status : AddEntryResponseStatus = AddEntryOk;
            var ledgerIdx : 0..2;
            for i, ledger in bookies[to.id].ledgers {
              if ledger.id == payload.ledgerId {
                ledgerIdx = i;
                break;
              }
            }
            if ledgerIdx == 0 {
              push(bookies[to.id].ledgers, Ledger {
                id: payload.ledgerId,
              });
              ledgerIdx = size(bookies[to.id].ledgers);
            }
            if bookies[to.id].ledgers[ledgerIdx].fenced &&
               !payload.recovery {
              status = AddEntryFenced;
            }
            if status == AddEntryOk {
              bookies[to.id].ledgers[ledgerIdx].lac = payload.lac;
              if payload.entryId == size(bookies[to.id].ledgers[ledgerIdx].entries) + 1 {
                push(bookies[to.id].ledgers[ledgerIdx].entries, Entry{});
              }
            }
            sendMessage(Message {
              from: message.to,
              to: message.from,
              payload: AddEntryResponse {
                status: status,
              },
            });
          } // AddEntryRequest

          FenceLedgerRequest(payload) {
            for ledger in bookies[to.id].ledgers {
              if ledger.id == payload.ledgerId {
                ledger.fenced = True;
                sendMessage(Message {
                  from: message.to,
                  to: message.from,
                  payload: FenceLedgerResponse {
                    ledgerId: payload.ledgerId,
                    lastEntry: size(ledger.entries),
                  },
                });
                break;
              }
            }
          } // FenceLedgerRequest

          default { assert False; } // other message types
        }
      } // to BookieNode

      ZooKeeperNode {
        match message.payload {

          CreateLedgerRequest {
            if !full(zooKeeper.ledgers) {
              var ensemble : Ensemble;
              push(ensemble, bookieGen());
              push(ensemble, bookieGen());
              push(ensemble, bookieGen());
              push(zooKeeper.ledgers, LedgerMeta{
                ensemble: ensemble,
              });
              var ledgerId : LedgerId = size(zooKeeper.ledgers);
              sendMessage(Message {
                from: message.to,
                to: message.from,
                payload: CreateLedgerResponse {
                  ledgerId: ledgerId,
                  ensemble: ensemble,
                },
              });
            }
          } // CreateLedgerRequest

          CloseLedgerRequest(payload) {
            zooKeeper.ledgers[payload.ledgerId].state = Closed {
              lac: payload.lac,
            };
          } // CloseLedgerRequest

          ReadLedgerMetaRequest(payload) {
            sendMessage(Message {
              from: message.to,
              to: message.from,
              payload: ReadLedgerMetaResponse {
                ledgerId: payload.ledgerId,
                meta: zooKeeper.ledgers[payload.ledgerId],
              },
            });
          } // ReadLedgerMetaRequest

          default { assert False; } // other message types
        }
      } // to ZooKeeperNode

    }
    remove(network, message);
  }
}
